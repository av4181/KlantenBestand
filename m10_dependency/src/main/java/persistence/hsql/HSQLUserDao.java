package persistence.hsql;

import exceptions.KlantException;
import model.User;
import persistence.DataSource;
import persistence.UserDao;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Logger;

// Implementatie van een UserDao specifiek voor HSQL, later kan er bv. ook een implementatie voor een user op
// een Postgres db komen
public class HSQLUserDao implements UserDao {
    private static final Logger L = Logger.getLogger(HSQLUserDao.class.getName());

    public HSQLUserDao() {
        createTable();
    }

    private void createTable() {
        try (Statement stmt = DataSource.getInstance().getConnection().createStatement()) {
            String sql = "CREATE TABLE IF NOT EXISTS USERS (" +
                    "  ID INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1 INCREMENT BY 1) PRIMARY KEY, " +
                    "  NAME VARCHAR(50) NOT NULL, " +
                    "  PASSWORD VARCHAR(50) NOT NULL" +
                    ")";
            stmt.executeUpdate(sql);
        } catch (SQLException e) {
            L.warning("Problem while creating the USERS table: " + e.getMessage());
            throw new KlantException(e);
        }
    }

    @Override
    public User getUserByName(String name) {
        L.info("Getting user by name: " + name);
        try (PreparedStatement preparedStatement = DataSource.getInstance().getConnection().prepareStatement(
                "SELECT * FROM USERS WHERE NAME = ?")) {
            preparedStatement.setString(1, name);
            ResultSet rs = preparedStatement.executeQuery();
            if (rs.next()) {
                return new User(rs.getString("NAME"), rs.getString("PASSWORD"));
            } else {
                return null;
            }
        } catch (SQLException e) {
            L.warning("Problem while getting the user: " + e.getMessage());
            throw new KlantException(e);
        }
    }

    @Override
    public void addUser(User user) {
        try (PreparedStatement preparedStatement = DataSource.getInstance().getConnection()
                .prepareStatement("INSERT INTO USERS VALUES (NULL, ?, ?)")) {
            preparedStatement.setString(1, user.getName());
            preparedStatement.setString(2, user.getPassword());
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            L.warning("Problem while adding the user: " + e.getMessage());
            throw new KlantException(e);
        }
    }
}
